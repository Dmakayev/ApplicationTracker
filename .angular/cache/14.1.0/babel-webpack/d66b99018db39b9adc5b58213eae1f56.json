{"ast":null,"code":"import { onAuthStateChanged, onIdTokenChanged, getIdToken } from 'firebase/auth';\nimport { Observable, from, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Create an observable of authentication state. The observer is only\n * triggered on sign-in or sign-out.\n * @param auth firebase.auth.Auth\n */\n\nfunction authState(auth) {\n  return new Observable(function (subscriber) {\n    var unsubscribe = onAuthStateChanged(auth, subscriber.next.bind(subscriber), subscriber.error.bind(subscriber), subscriber.complete.bind(subscriber));\n    return {\n      unsubscribe: unsubscribe\n    };\n  });\n}\n/**\n * Create an observable of user state. The observer is triggered for sign-in,\n * sign-out, and token refresh events\n * @param auth firebase.auth.Auth\n */\n\n\nfunction user(auth) {\n  return new Observable(function (subscriber) {\n    var unsubscribe = onIdTokenChanged(auth, subscriber.next.bind(subscriber), subscriber.error.bind(subscriber), subscriber.complete.bind(subscriber));\n    return {\n      unsubscribe: unsubscribe\n    };\n  });\n}\n/**\n * Create an observable of idToken state. The observer is triggered for sign-in,\n * sign-out, and token refresh events\n * @param auth firebase.auth.Auth\n */\n\n\nfunction idToken(auth) {\n  return user(auth).pipe(switchMap(function (user) {\n    return user ? from(getIdToken(user)) : of(null);\n  }));\n}\n\nexport { authState, idToken, user };","map":{"version":3,"names":["onAuthStateChanged","onIdTokenChanged","getIdToken","Observable","from","of","switchMap","authState","auth","subscriber","unsubscribe","next","bind","error","complete","user","idToken","pipe"],"sources":["/Users/dmakayev/WebstormProjects/ApplicationTracker/node_modules/rxfire/auth/index.esm.js"],"sourcesContent":["import { onAuthStateChanged, onIdTokenChanged, getIdToken } from 'firebase/auth';\nimport { Observable, from, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Create an observable of authentication state. The observer is only\n * triggered on sign-in or sign-out.\n * @param auth firebase.auth.Auth\n */\nfunction authState(auth) {\n    return new Observable(function (subscriber) {\n        var unsubscribe = onAuthStateChanged(auth, subscriber.next.bind(subscriber), subscriber.error.bind(subscriber), subscriber.complete.bind(subscriber));\n        return { unsubscribe: unsubscribe };\n    });\n}\n/**\n * Create an observable of user state. The observer is triggered for sign-in,\n * sign-out, and token refresh events\n * @param auth firebase.auth.Auth\n */\nfunction user(auth) {\n    return new Observable(function (subscriber) {\n        var unsubscribe = onIdTokenChanged(auth, subscriber.next.bind(subscriber), subscriber.error.bind(subscriber), subscriber.complete.bind(subscriber));\n        return { unsubscribe: unsubscribe };\n    });\n}\n/**\n * Create an observable of idToken state. The observer is triggered for sign-in,\n * sign-out, and token refresh events\n * @param auth firebase.auth.Auth\n */\nfunction idToken(auth) {\n    return user(auth).pipe(switchMap(function (user) { return (user ? from(getIdToken(user)) : of(null)); }));\n}\n\nexport { authState, idToken, user };\n"],"mappings":"AAAA,SAASA,kBAAT,EAA6BC,gBAA7B,EAA+CC,UAA/C,QAAiE,eAAjE;AACA,SAASC,UAAT,EAAqBC,IAArB,EAA2BC,EAA3B,QAAqC,MAArC;AACA,SAASC,SAAT,QAA0B,gBAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;EACrB,OAAO,IAAIL,UAAJ,CAAe,UAAUM,UAAV,EAAsB;IACxC,IAAIC,WAAW,GAAGV,kBAAkB,CAACQ,IAAD,EAAOC,UAAU,CAACE,IAAX,CAAgBC,IAAhB,CAAqBH,UAArB,CAAP,EAAyCA,UAAU,CAACI,KAAX,CAAiBD,IAAjB,CAAsBH,UAAtB,CAAzC,EAA4EA,UAAU,CAACK,QAAX,CAAoBF,IAApB,CAAyBH,UAAzB,CAA5E,CAApC;IACA,OAAO;MAAEC,WAAW,EAAEA;IAAf,CAAP;EACH,CAHM,CAAP;AAIH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASK,IAAT,CAAcP,IAAd,EAAoB;EAChB,OAAO,IAAIL,UAAJ,CAAe,UAAUM,UAAV,EAAsB;IACxC,IAAIC,WAAW,GAAGT,gBAAgB,CAACO,IAAD,EAAOC,UAAU,CAACE,IAAX,CAAgBC,IAAhB,CAAqBH,UAArB,CAAP,EAAyCA,UAAU,CAACI,KAAX,CAAiBD,IAAjB,CAAsBH,UAAtB,CAAzC,EAA4EA,UAAU,CAACK,QAAX,CAAoBF,IAApB,CAAyBH,UAAzB,CAA5E,CAAlC;IACA,OAAO;MAAEC,WAAW,EAAEA;IAAf,CAAP;EACH,CAHM,CAAP;AAIH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASM,OAAT,CAAiBR,IAAjB,EAAuB;EACnB,OAAOO,IAAI,CAACP,IAAD,CAAJ,CAAWS,IAAX,CAAgBX,SAAS,CAAC,UAAUS,IAAV,EAAgB;IAAE,OAAQA,IAAI,GAAGX,IAAI,CAACF,UAAU,CAACa,IAAD,CAAX,CAAP,GAA4BV,EAAE,CAAC,IAAD,CAA1C;EAAoD,CAAvE,CAAzB,CAAP;AACH;;AAED,SAASE,SAAT,EAAoBS,OAApB,EAA6BD,IAA7B"},"metadata":{},"sourceType":"module"}